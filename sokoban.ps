%!PS
%%Title: sokoban.ps
%%Creator: Nicolas Seriot
%%BoundingBox: 0 0 600 300

% rm /tmp/p; mkfifo /tmp/p; cat sokoban.ps /tmp/p | gv -
% rm /tmp/p; mkfifo /tmp/p; cat sokoban.ps /tmp/p | gv -q -media=bbox -

% stty raw -echo; cat > /tmp/p

% Game symbols:
% (@) Man
% (+) ManOnGoal 
% ($) Box
% (*) BoxOnGoal
% (#) Wall
% (.) Goal
% ( ) or (-) Floor

/S 16 def % square size

/MAX_WIDTH 24 def
/MAX_HEIGHT 12 def

/RB_SIZE 1024 def % moves ring buffer

/Courier findfont 10 scalefont setfont

% converts a level string into a 2D array of characters
/_s_ParseLevel_a_ {

  /s exch def
  /sLength s length def

  /lines MAX_HEIGHT array def
  /line MAX_WIDTH array def
  
  /x 0 def % iterates on line
  /y 0 def % iterates on lines

  0 1 sLength 1 sub {
    /i exch def
	
    /c s i 1 getinterval def
	
	c (\n) eq i sLength 1 sub eq or {
		lines y line put
		/line MAX_WIDTH array def
		/y y 1 add def
		/x 0 def
    } {
		c (-) eq c (_) eq or { /c ( ) def } if
	    line x c put
		/x x 1 add def    	
    } ifelse

  } for
  
  lines 0 y getinterval

} bind def

% Drawing functions for game elements
/DrawMan {
	gsave
	0 0 1 setrgbcolor
	newpath
	5 5 4 0 360 arc
	closepath
	fill
	grestore
} bind def

/DrawBox {
	gsave
	1 0 1 setrgbcolor
	2 2 translate
	0 0 6 6 rectfill
	grestore
} bind def

/DrawBoxOnGoal {
	DrawBox
	DrawGoal
} bind def

/DrawWall {
	gsave

	0.5 setgray
	0 0 S S rectfill

	0 setgray
	0.5 setlinewidth
	0 0 S S rectstroke

	grestore
} bind def

/DrawGoal {
	gsave

	newpath
	5 5 2 0 360 arc
	
	gsave
	1 1 0 setrgbcolor
	fill
	grestore
	
	0 setgray
	0.5 setlinewidth
	stroke
	
	grestore
} bind def

/DrawFloor {
	gsave

	1 setgray
	0 0 S S rectfill
	
	grestore
} bind def

/DrawManOnGoal {
	DrawMan
	DrawGoal
} bind def

% Maps characters to drawing functions
/_c_DrawChar {
	/c exch def
	
	c (@) eq { DrawMan } if
	c (+) eq { DrawManOnGoal } if
	c ($) eq { DrawBox } if
	c (*) eq { DrawBoxOnGoal } if
	c (#) eq { DrawWall } if
	c (.) eq { DrawGoal } if
	c (_) eq { DrawFloor } if
	%c (-) eq { DrawFloor } if
	%c ( ) eq { DrawFloor } if
	
} bind def

/DrawLevel {
	
	gsave
	
	% background
	
	/h MAX_HEIGHT 1 add S mul def
	/w MAX_WIDTH S mul def

	/h_min S neg def
	/h_max h S add def
	/w_min S neg def 
	/w_max w S add def
	
	0.95 setgray
	w_min h_min w_max h_max rectfill
	grestore
	
	% cells
	
	{		
		/c exch def
		gsave
		x S mul MAX_HEIGHT y sub S mul translate
		c _c_DrawChar
		grestore
	} _p_EnumerateLevel

	% level number
	
	0 0 moveto
	0.5 setgray
	(Level:) show
	gOrderedLevelsIndex 2 string cvs show

	% moves counter
	
	60 0 moveto
	0.5 setgray
	
	(Moves:) show
	movesCount 3 string cvs show
	
	% push counter

	120 0 moveto
	0.5 setgray

	(Push:) show
	pushCount 3 string cvs show
	
	% win message

	0 20 moveto
	0.5 setgray
	
	gWin { (WIN!) show } if
	
	%
	
	flushpage
} def

/_updates_UpdateLevel {	
    /u exch def
    /uu 3 array def
        
    0 1 u length 1 sub {
        /i exch def
        /a u i get def
        a null eq { exit } if
                
        /x_ a 0 get def
        /y_ a 1 get def
        /c_ a 2 get def
        
        /_c gLevel y_ get x_ get def
        
        % save current state
        uu i [x_ y_ _c] put

        % update push counter if moving a box
        _c ($) eq _c (*) eq or {
    	    /pushCount pushCount 1 add def
        } if

        % update level
        gLevel y_ get x_ c_ put        
    } for

    % store move in ring buffer
	rb rbh uu put
	/rbh rbh 1 add RB_SIZE mod def
} bind def

% reverts last move
/Undo_b_ {
	
	rbh 0 eq { RB_SIZE 1 sub } { rbh 1 sub } ifelse
	/rbh exch def
	/uu rb rbh get def
	rb rbh null put
	
	/canUndo { uu null ne } def
	
	canUndo {
		uu {
	    	/a exch def
			
	    	a null eq { canUndo exit } if
    	
	    	/_x a 0 get def
	    	/_y a 1 get def
	    	/_c a 2 get def
    	
	    	gLevel _y get _x _c put

	    	% update push counter
	    	_c ($) eq _c (*) eq or {
	    	    /pushCount pushCount 1 sub def
	    	} if
    	
	    	flush
            
	    } forall		
		/movesCount movesCount 1 sub def
	} if

	canUndo
} bind def

% iterates through level array
/_p_EnumerateLevel {
	/p exch def
	
	/nbLines gLevel length def
	
	0 1 nbLines 1 sub {
		/y exch def
		/line gLevel y get def
		
		line null eq { exit } if
		
		0 1 line length 1 sub {
			/x exch def
			/c_ line x get def
	    
			c_ null eq { exit } if
	    
			c_ p
		} for
	} for
		
} bind def

% look for specified characters
/_a_FindChars_x_y_ {
	/a exch def
	
	/X null def
	/Y null def
	
	{
		/c exch def
		a {
			/ac exch def
			
			c ac eq {
				/X x def
				/Y y def
				exit
			} if
			
		} forall
	} _p_EnumerateLevel
	
	X
	Y
} bind def

% handles player movement and game logic
/_key_Move_b_ {

	/key exch def
	/canMove false def
	
	(-> ) =only key ==
		
    % handle arrow keys (65-68)
	 65 key eq
	 66 key eq or
	 67 key eq or
	 68 key eq or {

		key 65 ge key 68 le and {
			/xDir 0 def
			/yDir 0 def

			65 key eq { /yDir -1 def (* UP)==    } if % UP
			66 key eq { /yDir  1 def (* DOWN)==  } if % DOWN
			67 key eq { /xDir  1 def (* RIGHT)== } if % RIGHT
			68 key eq { /xDir -1 def (* LEFT)==  } if % LEFT
		} if
		
        % find player position
		[(@) (+)] _a_FindChars_x_y_
				
		/my exch def
		/mx exch def
		
		/mx_ mx xDir add def
		/my_ my yDir add def		
    	
		/from gLevel my get mx get def
		/to   gLevel my_ get mx_ get def
		
		(from:) =only from ==
		(to:) =only to ==
		
		/updates 3 array def
		/updatesCount 0 def
		
        % handle different destination types
		(#) to eq {
			% can't move into wall
		} if
		
		( ) to eq {
			/canMove true def
			/to (@) def
		} if
		
		(.) to eq {
			/canMove true def
			/to (+) def
		} if
    	
		% handle box pushing
		(*) to eq ($) to eq or {
			
			/dst gLevel my_ yDir add get mx_ xDir add get def
			
			dst ( ) eq {
				/canMove true def
				
				updates updatesCount [mx_ xDir add my_ yDir add ($)] put
				/updatesCount updatesCount 1 add def
			} if
    	    
			dst (.) eq {
				/canMove true def
				updates updatesCount [mx_ xDir add my_ yDir add (*)] put
				/updatesCount updatesCount 1 add def
			} if
    	
			canMove {
				to ($) eq { /to (@) def } if
				to (*) eq { /to (+) def } if
			} if
    	
		} if
		
		% update source cell
		(+) from eq canMove and {
			/from (.) def
		} if
    	
		(@) from eq canMove and {
			/from ( ) def
		} if
		
		% apply updates if move is valid
		canMove {
			/movesCount movesCount 1 add def
			
			updates updatesCount [mx  my  from] put
			/updateCount updatesCount 1 add def
    	
			updates updateCount [mx_ my_ to] put
			/updateCount updateCount 1 add def
    	
			updates _updates_UpdateLevel
			
			/mx mx_ def
			/my my_ def
		} if
		
		% win when all boxes on goals	
		[($)] _a_FindChars_x_y_
		/by exch def
		/bx exch def
	
		by null eq bx null eq and {
			(WIN) = flush
			/gWin true def
		} if
		
	} if
	
	% handle undo (z key)
	key 122 eq {
		(* UNDO *) = flush
		
		Undo_b_
		/canMove exch def
		
	} if
	
	canMove
	
} bind def

% levels from David W. Skinner

/l0 ( ########
##      #
#   .   #
#   $   #
# .$@$. #
####$   #
   #.   #
   #   ##
   #####) def

/l1 (   ###
  ## # ####
 ##  ###  #
## $      #
#   @$ #  #
### $###  #
  #  #..  #
 ## ##.# ##
 #      ##
 #     ##
 #######) def

/l2 ( ## #####
## ## . #
# ## $. #
 ## $   #
## $@ ###
# $  ##
#.. ## ##
#   # ##
##### #) def
  
/_l_SetupGameState {
    /gLevel exch _s_ParseLevel_a_ def
	/rb RB_SIZE array def % moves ring buffer
	/rbh 0 def            % ring buffer head
	/movesCount 0 def
    /pushCount 0 def
    /gWin false def
} bind def

/gOrderedLevels [l0 l1 l2] def
/gOrderedLevelsIndex 0 def

/stdin (%stdin) (r) file def

% set up display
3 3 scale
20 20 translate

gOrderedLevels gOrderedLevelsIndex get _l_SetupGameState
DrawLevel

% main game loop
{
    stdin read {
		/key exch def
		
		% move to next level with any key
		gWin key 27 ne and key 91 ne and key 10 ne and {
			
		    gOrderedLevelsIndex gOrderedLevels length 1 sub lt {
		        /gOrderedLevelsIndex gOrderedLevelsIndex 1 add def
		        gOrderedLevels gOrderedLevelsIndex get _l_SetupGameState
				DrawLevel
		    } {
		        (No more levels!) =
		    } ifelse
		} {
			key _key_Move_b_ {
				DrawLevel
			} if
		} ifelse
    } {
        exit
    } ifelse
	
	%gLevel { == } forall

} loop
